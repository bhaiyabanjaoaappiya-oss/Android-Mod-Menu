# .github/workflows/android-build.yml

name: Android CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ "main" ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    steps:
      # 1. Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Grant execute permission for gradlew
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 4. Decode Keystore and place it in the correct directory
      
      # 5. Build and sign the release APK
      - name: Build release APK
        run: ./gradlew assembleRelease
        
      # 6. Upload APK as a build artifact
      # This lets you download the APK directly from the Actions tab
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: app/build/outputs/apk/release/app-release.apk

      # 7. Create a GitHub Release and upload the APK
      - name: Create Release and Upload APK
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/') # Only run this step if a new tag is pushed
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: app/build/outputs/apk/release/app-release.apk
          body: "Automated release build."
